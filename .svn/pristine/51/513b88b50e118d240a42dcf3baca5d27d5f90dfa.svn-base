{"ast":null,"code":"import axios from '../utils/axios';\n\nclass AuthService {\n  constructor() {\n    this.signIn = (email, password) => {\n      return new Promise((resolve, reject) => {\n        axios.post('/api/home/login', {\n          email,\n          password\n        }).then(response => {\n          if (response.data.user) {\n            this.setToken('JWT');\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    };\n\n    this.signInWithToken = () => {\n      return new Promise((resolve, reject) => {\n        axios.post('/api/home/me').then(response => {\n          if (response.data.user) {\n            resolve(response.data.user);\n          } else {\n            reject(response.data.error);\n          }\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    };\n\n    this.signOut = () => {\n      this.removeToken();\n    };\n\n    this.setToken = token => {\n      localStorage.setItem(\"accessToken\", token);\n    };\n\n    this.getToken = () => localStorage.getItem(\"accessToken\");\n\n    this.removeToken = () => localStorage.removeItem(\"accessToken\");\n\n    this.isAuthenticated = () => !!this.getToken();\n  }\n\n}\n\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"sources":["E:/DEV/social-dev/src/services/authService.js"],"names":["axios","AuthService","signIn","email","password","Promise","resolve","reject","post","then","response","data","user","setToken","error","catch","signInWithToken","signOut","removeToken","token","localStorage","setItem","getToken","getItem","removeItem","isAuthenticated","authService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,WAAN,CAAkB;AAAA;AAAA,SACdC,MADc,GACL,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCP,QAAAA,KAAK,CAACQ,IAAN,CAAW,iBAAX,EAA8B;AAACL,UAAAA,KAAD;AAAQC,UAAAA;AAAR,SAA9B,EACCK,IADD,CACMC,QAAQ,IAAI;AACd,cAAIA,QAAQ,CAACC,IAAT,CAAcC,IAAlB,EAAwB;AACpB,iBAAKC,QAAL,CAAc,KAAd;AACAP,YAAAA,OAAO,CAACI,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAP;AACH,WAHD,MAGO;AACHL,YAAAA,MAAM,CAACG,QAAQ,CAACC,IAAT,CAAcG,KAAf,CAAN;AACH;AACJ,SARD,EASCC,KATD,CASOD,KAAK,IAAI;AACZP,UAAAA,MAAM,CAACO,KAAD,CAAN;AACH,SAXD;AAYH,OAbM,CAAP;AAcH,KAhBa;;AAAA,SAkBdE,eAlBc,GAkBI,MAAM;AACpB,aAAO,IAAIX,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCP,QAAAA,KAAK,CAACQ,IAAN,CAAW,cAAX,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,cAAIA,QAAQ,CAACC,IAAT,CAAcC,IAAlB,EAAwB;AACpBN,YAAAA,OAAO,CAACI,QAAQ,CAACC,IAAT,CAAcC,IAAf,CAAP;AACH,WAFD,MAEO;AACHL,YAAAA,MAAM,CAACG,QAAQ,CAACC,IAAT,CAAcG,KAAf,CAAN;AACH;AACJ,SAPD,EAQCC,KARD,CAQOD,KAAK,IAAI;AACZP,UAAAA,MAAM,CAACO,KAAD,CAAN;AACH,SAVD;AAWH,OAZM,CAAP;AAaH,KAhCa;;AAAA,SAkCdG,OAlCc,GAkCJ,MAAM;AACZ,WAAKC,WAAL;AACH,KApCa;;AAAA,SAsCdL,QAtCc,GAsCFM,KAAD,IAAW;AAClBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,KAApC;AACH,KAxCa;;AAAA,SA0CdG,QA1Cc,GA0CH,MAAMF,YAAY,CAACG,OAAb,CAAqB,aAArB,CA1CH;;AAAA,SA4CdL,WA5Cc,GA4CA,MAAME,YAAY,CAACI,UAAb,CAAwB,aAAxB,CA5CN;;AAAA,SA8CdC,eA9Cc,GA8CI,MAAM,CAAC,CAAC,KAAKH,QAAL,EA9CZ;AAAA;;AAAA;;AAiDlB,MAAMI,WAAW,GAAG,IAAIzB,WAAJ,EAApB;AAEA,eAAeyB,WAAf","sourcesContent":["import axios from '../utils/axios';\r\n\r\nclass AuthService {\r\n    signIn = (email, password) => {\r\n        return new Promise((resolve, reject) => {\r\n            axios.post('/api/home/login', {email, password})\r\n            .then(response => {\r\n                if (response.data.user) {\r\n                    this.setToken('JWT')\r\n                    resolve(response.data.user)\r\n                } else {\r\n                    reject(response.data.error)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    signInWithToken = () => {\r\n        return new Promise ((resolve, reject) => {\r\n            axios.post('/api/home/me')\r\n            .then(response => {\r\n                if (response.data.user) {\r\n                    resolve(response.data.user)\r\n                } else {\r\n                    reject(response.data.error)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                reject(error)\r\n            })\r\n        })\r\n    }\r\n\r\n    signOut = () => {\r\n        this.removeToken();\r\n    }\r\n\r\n    setToken = (token) => {\r\n        localStorage.setItem(\"accessToken\", token);\r\n    };\r\n\r\n    getToken = () => localStorage.getItem(\"accessToken\");\r\n\r\n    removeToken = () => localStorage.removeItem(\"accessToken\");\r\n\r\n    isAuthenticated = () => !!this.getToken();\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;"]},"metadata":{},"sourceType":"module"}